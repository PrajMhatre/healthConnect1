{"ast":null,"code":"var _jsxFileName = \"F:\\\\healthconnect\\\\healthConnect\\\\frontend\\\\src\\\\components\\\\DoctorRecommendation\\\\DoctorList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorList = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch filtered doctors from the backend API\n        const response = await axios.get(\"http://localhost:4000/api/doctors/filter\");\n        if (response.status === 200) {\n          setDoctors(response.data);\n        } else {\n          setError(\"Failed to fetch doctors. Please try again.\");\n        }\n      } catch (err) {\n        console.error(\"ðŸš¨ Error fetching doctors:\", err);\n        setError(\"Error fetching doctors. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDoctors();\n  }, []); // Fetch data only once when component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Doctor List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading doctors...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this), !loading && !error && doctors.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: doctors[0] && Object.keys(doctors[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: key.replace(/_/g, \" \")\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: doctors.map((doctor, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.values(doctor).map((value, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 19\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : !loading && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No doctors found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorList, \"JOh9bjoU1QR1F1cG84IgxjGHgyw=\");\n_c = DoctorList;\nexport default DoctorList;\nvar _c;\n$RefreshReg$(_c, \"DoctorList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","DoctorList","_s","doctors","setDoctors","loading","setLoading","error","setError","fetchDoctors","response","get","status","data","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","length","border","Object","keys","map","key","replace","doctor","index","values","value","i","_c","$RefreshReg$"],"sources":["F:/healthconnect/healthConnect/frontend/src/components/DoctorRecommendation/DoctorList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst DoctorList = () => {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // Fetch filtered doctors from the backend API\r\n        const response = await axios.get(\"http://localhost:4000/api/doctors/filter\");\r\n\r\n        if (response.status === 200) {\r\n          setDoctors(response.data);\r\n        } else {\r\n          setError(\"Failed to fetch doctors. Please try again.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"ðŸš¨ Error fetching doctors:\", err);\r\n        setError(\"Error fetching doctors. Please try again.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDoctors();\r\n  }, []); // Fetch data only once when component mounts\r\n\r\n  return (\r\n    <div>\r\n      <h2>Doctor List</h2>\r\n\r\n      {loading && <p>Loading doctors...</p>}\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n\r\n      {!loading && !error && doctors.length > 0 ? (\r\n        <table border=\"1\">\r\n          <thead>\r\n            <tr>\r\n              {/* Render column headers based on the doctor's object keys */}\r\n              {doctors[0] && Object.keys(doctors[0]).map((key) => (\r\n                <th key={key}>{key.replace(/_/g, \" \")}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {doctors.map((doctor, index) => (\r\n              <tr key={index}>\r\n                {/* Render values dynamically */}\r\n                {Object.values(doctor).map((value, i) => (\r\n                  <td key={i}>{value}</td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        !loading && !error && <p>No doctors found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}