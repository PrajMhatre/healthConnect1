{"ast":null,"code":"var _jsxFileName = \"F:\\\\healthconnect\\\\healthConnect\\\\frontend\\\\src\\\\components\\\\Profile\\\\UserProfile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // For redirecting user\nimport './UserProfile.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProfile = () => {\n  _s();\n  const [userData, setUserData] = useState({\n    username: '',\n    email: '',\n    role: '',\n    userId: ''\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check if user is logged in by verifying token in localStorage\n    const token = localStorage.getItem('token');\n    if (!token) {\n      // If no token is found, redirect to the login page\n      navigate('/login');\n      return;\n    }\n\n    // Fetch user details from localStorage\n    const username = localStorage.getItem('username');\n    const email = localStorage.getItem('email');\n    const role = localStorage.getItem('role');\n    const userId = localStorage.getItem('userId');\n    if (username && email && role && userId) {\n      const userData = {\n        username,\n        email,\n        role,\n        userId\n      };\n      setUserData(userData);\n\n      // Send user data to the backend\n      sendUserDataToBackend(userData);\n    } else {\n      // If no user data is found, redirect to login\n      navigate('/login');\n    }\n  }, [navigate]);\n  const sendUserDataToBackend = async userData => {\n    try {\n      const response = await fetch('/api/user/profile', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}` // Include the token for authentication\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send user data to the backend');\n      }\n      const result = await response.json();\n      console.log('Backend response:', result);\n    } catch (error) {\n      console.error('Error sending user data to backend:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), \" \", userData.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), \" \", userData.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Role:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), \" \", userData.role]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"User ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), \" \", userData.userId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProfile, \"M7gUXqAnIyvQr/8kVDO3/9Ob+Yw=\", false, function () {\n  return [useNavigate];\n});\n_c = UserProfile;\nexport default UserProfile;\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom'; // For redirecting user\n// import './UserProfile.css';\n\n// const UserProfile = () => {\n//   const [userData, setUserData] = useState({\n//     username: '',\n//     email: '',\n//     role: '',\n//     userId: ''\n//   });\n\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     // Fetch user details from localStorage\n//     const username = localStorage.getItem('username');\n//     const email = localStorage.getItem('email');\n//     const role = localStorage.getItem('role');\n//     const userId = localStorage.getItem('userId');\n\n//     if (username && email && role && userId) {\n//       setUserData({ username, email, role, userId });\n\n//       // Send user data to the backend\n//       const fetchUserProfile = async () => {\n//         try {\n//           const response = await fetch('http://localhost:4000/api/user-profile', {\n//             method: 'POST', // Using POST method to send the data\n//             headers: {\n//               'Content-Type': 'application/json', // Set header to JSON\n//             },\n//             body: JSON.stringify({\n//               username, \n//               email, \n//               role, \n//               userId\n//             })\n//           });\n\n//           if (response.ok) {\n//             const data = await response.json();\n//             // Handle the response data, if needed\n//             console.log(data); // This will contain the data fetched from the backend\n//           } else {\n//             console.error('Failed to fetch user profile');\n//           }\n//         } catch (err) {\n//           console.error('Error sending user data:', err);\n//         }\n//       };\n\n//       fetchUserProfile(); // Call the function to send data to the backend\n//     } else {\n//       // If no user data is found, redirect to login\n//       navigate('/login');\n//     }\n//   }, [navigate]);\n\n//   return (\n//     <div className=\"profile-container\">\n//       <h2>User Profile</h2>\n//       <div className=\"profile-details\">\n//         <div>\n//           <strong>Username:</strong> {userData.username}\n//         </div>\n//         <div>\n//           <strong>Email:</strong> {userData.email}\n//         </div>\n//         <div>\n//           <strong>Role:</strong> {userData.role}\n//         </div>\n//         <div>\n//           <strong>User ID:</strong> {userData.userId}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","UserProfile","_s","userData","setUserData","username","email","role","userId","navigate","token","localStorage","getItem","sendUserDataToBackend","response","fetch","method","headers","body","JSON","stringify","ok","Error","result","json","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/healthconnect/healthConnect/frontend/src/components/Profile/UserProfile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // For redirecting user\r\nimport './UserProfile.css';\r\n\r\nconst UserProfile = () => {\r\n  const [userData, setUserData] = useState({\r\n    username: '',\r\n    email: '',\r\n    role: '',\r\n    userId: ''\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in by verifying token in localStorage\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token) {\r\n      // If no token is found, redirect to the login page\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    // Fetch user details from localStorage\r\n    const username = localStorage.getItem('username');\r\n    const email = localStorage.getItem('email');\r\n    const role = localStorage.getItem('role');\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    if (username && email && role && userId) {\r\n      const userData = { username, email, role, userId };\r\n      setUserData(userData);\r\n\r\n      // Send user data to the backend\r\n      sendUserDataToBackend(userData);\r\n    } else {\r\n      // If no user data is found, redirect to login\r\n      navigate('/login');\r\n    }\r\n  }, [navigate]);\r\n\r\n  const sendUserDataToBackend = async (userData) => {\r\n    try {\r\n      const response = await fetch('/api/user/profile', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}` // Include the token for authentication\r\n        },\r\n        body: JSON.stringify(userData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to send user data to the backend');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('Backend response:', result);\r\n    } catch (error) {\r\n      console.error('Error sending user data to backend:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <h2>User Profile</h2>\r\n      <div className=\"profile-details\">\r\n        <div>\r\n          <strong>Username:</strong> {userData.username}\r\n        </div>\r\n        <div>\r\n          <strong>Email:</strong> {userData.email}\r\n        </div>\r\n        <div>\r\n          <strong>Role:</strong> {userData.role}\r\n        </div>\r\n        <div>\r\n          <strong>User ID:</strong> {userData.userId}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserProfile;\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom'; // For redirecting user\r\n// import './UserProfile.css';\r\n\r\n// const UserProfile = () => {\r\n//   const [userData, setUserData] = useState({\r\n//     username: '',\r\n//     email: '',\r\n//     role: '',\r\n//     userId: ''\r\n//   });\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     // Fetch user details from localStorage\r\n//     const username = localStorage.getItem('username');\r\n//     const email = localStorage.getItem('email');\r\n//     const role = localStorage.getItem('role');\r\n//     const userId = localStorage.getItem('userId');\r\n\r\n//     if (username && email && role && userId) {\r\n//       setUserData({ username, email, role, userId });\r\n\r\n//       // Send user data to the backend\r\n//       const fetchUserProfile = async () => {\r\n//         try {\r\n//           const response = await fetch('http://localhost:4000/api/user-profile', {\r\n//             method: 'POST', // Using POST method to send the data\r\n//             headers: {\r\n//               'Content-Type': 'application/json', // Set header to JSON\r\n//             },\r\n//             body: JSON.stringify({\r\n//               username, \r\n//               email, \r\n//               role, \r\n//               userId\r\n//             })\r\n//           });\r\n\r\n//           if (response.ok) {\r\n//             const data = await response.json();\r\n//             // Handle the response data, if needed\r\n//             console.log(data); // This will contain the data fetched from the backend\r\n//           } else {\r\n//             console.error('Failed to fetch user profile');\r\n//           }\r\n//         } catch (err) {\r\n//           console.error('Error sending user data:', err);\r\n//         }\r\n//       };\r\n\r\n//       fetchUserProfile(); // Call the function to send data to the backend\r\n//     } else {\r\n//       // If no user data is found, redirect to login\r\n//       navigate('/login');\r\n//     }\r\n//   }, [navigate]);\r\n\r\n//   return (\r\n//     <div className=\"profile-container\">\r\n//       <h2>User Profile</h2>\r\n//       <div className=\"profile-details\">\r\n//         <div>\r\n//           <strong>Username:</strong> {userData.username}\r\n//         </div>\r\n//         <div>\r\n//           <strong>Email:</strong> {userData.email}\r\n//         </div>\r\n//         <div>\r\n//           <strong>Role:</strong> {userData.role}\r\n//         </div>\r\n//         <div>\r\n//           <strong>User ID:</strong> {userData.userId}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UserProfile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}