{"ast":null,"code":"var _jsxFileName = \"F:\\\\healthconnect\\\\healthConnect\\\\frontend\\\\src\\\\components\\\\DoctorRecommendation\\\\DoctorList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorList = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Define filter criteria (modify as needed)\n        const filterParams = {\n          location: \"Kalyan\",\n          // example filter value\n          speciality: \"Heart\",\n          // example filter value\n          experience: 2,\n          // example filter value\n          consultationFee: 200,\n          // example filter value\n          availabilityStatus: \"available\" // example filter value\n        };\n\n        // Build query parameters string\n        const queryParams = new URLSearchParams(filterParams).toString();\n\n        // Fetch filtered doctors from backend\n        const response = await axios.get(`http://localhost:4000/api/doctors/filter?${queryParams}`);\n\n        // Update state with response data\n        setDoctors(response.data);\n      } catch (err) {\n        console.error(\"ðŸš¨ Error fetching doctors:\", err);\n        setError(\"Error fetching doctors. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDoctors();\n  }, []); // Fetch data only once when component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Doctor List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading doctors...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this), !loading && !error && doctors.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.keys(doctors[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: key.replace(/_/g, \" \")\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: doctors.map((doctor, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.values(doctor).map((value, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 19\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : !loading && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No doctors found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorList, \"JOh9bjoU1QR1F1cG84IgxjGHgyw=\");\n_c = DoctorList;\nexport default DoctorList;\nvar _c;\n$RefreshReg$(_c, \"DoctorList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","DoctorList","_s","doctors","setDoctors","loading","setLoading","error","setError","fetchDoctors","filterParams","location","speciality","experience","consultationFee","availabilityStatus","queryParams","URLSearchParams","toString","response","get","data","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","length","border","Object","keys","map","key","replace","doctor","index","values","value","i","_c","$RefreshReg$"],"sources":["F:/healthconnect/healthConnect/frontend/src/components/DoctorRecommendation/DoctorList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst DoctorList = () => {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // Define filter criteria (modify as needed)\r\n        const filterParams = {\r\n          location: \"Kalyan\", // example filter value\r\n          speciality: \"Heart\", // example filter value\r\n          experience: 2, // example filter value\r\n          consultationFee: 200, // example filter value\r\n          availabilityStatus: \"available\", // example filter value\r\n        };\r\n\r\n        // Build query parameters string\r\n        const queryParams = new URLSearchParams(filterParams).toString();\r\n\r\n        // Fetch filtered doctors from backend\r\n        const response = await axios.get(\r\n          `http://localhost:4000/api/doctors/filter?${queryParams}`\r\n        );\r\n        \r\n        // Update state with response data\r\n        setDoctors(response.data);\r\n      } catch (err) {\r\n        console.error(\"ðŸš¨ Error fetching doctors:\", err);\r\n        setError(\"Error fetching doctors. Please try again.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDoctors();\r\n  }, []); // Fetch data only once when component mounts\r\n\r\n  return (\r\n    <div>\r\n      <h2>Doctor List</h2>\r\n\r\n      {loading && <p>Loading doctors...</p>}\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n\r\n      {!loading && !error && doctors.length > 0 ? (\r\n        <table border=\"1\">\r\n          <thead>\r\n            <tr>\r\n              {Object.keys(doctors[0]).map((key) => (\r\n                <th key={key}>{key.replace(/_/g, \" \")}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {doctors.map((doctor, index) => (\r\n              <tr key={index}>\r\n                {Object.values(doctor).map((value, i) => (\r\n                  <td key={i}>{value}</td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        !loading && !error && <p>No doctors found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}